import { Brick } from "../gameObjects/brick"
import { Wall } from "../gameObjects/wall"
import { Background } from "../gameObjects/background"
import { GameManager } from "../gameManager"

// Ready player one
const readyPlayerOne = new Entity()
readyPlayerOne.addComponent(new GLTFShape("arcade-games/models/readyPlayerOne.glb"))
readyPlayerOne.addComponent(new Transform({ position: new Vector3(16, 1, 16) }))

// Setup
const gameElements: Entity[] = []
const brickOffsetX = 7
const brickOffsetZ = 28.75
const brickSize = 0.55
const bricks = [
  // Row 1
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ), color: Color3.FromInts(255, 78, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ), color: Color3.FromInts(255, 78, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ), color: Color3.FromInts(255, 57, 85) },
  // Row 2
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(246, 88, 83) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 83, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 83, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 78, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 78, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 51, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(255, 51, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize), color: Color3.FromInts(246, 46, 82) },
  // Row 3
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 104, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 84, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 84, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 50, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 50, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 2), color: Color3.FromInts(255, 43, 84) },
  // Row 4
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 84, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 84, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 50, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 50, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 43, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 3), color: Color3.FromInts(255, 43, 84) },
  // Row 5
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 85, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 50, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 50, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 4), color: Color3.FromInts(255, 43, 84) },
  // Row 6
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 70, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 70, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 50, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 50, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 43, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 5), color: Color3.FromInts(255, 43, 84) },
  // Row 7
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 129, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 57, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 57, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 51, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 51, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 6), color: Color3.FromInts(255, 44, 84) },
  // Row 8
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 129, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 129, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 57, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 51, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 51, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 44, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 7), color: Color3.FromInts(255, 44, 84) },
  // Row 9
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 130, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 130, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 50, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 8), color: Color3.FromInts(255, 50, 84) },
  // Row 10
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(247, 139, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 130, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 130, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 50, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 50, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 9), color: Color3.FromInts(255, 44, 81) },
  // Row 11
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 149, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 142, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 142, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 130, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 130, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 103, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 103, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 57, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 57, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 10), color: Color3.FromInts(255, 50, 84) },
  // Row 12
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 149, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 142, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 142, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 130, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 130, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 124, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 103, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 103, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 57, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 57, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 11), color: Color3.FromInts(255, 50, 84) },
  // Row 13
  { position: new Vector3(brickOffsetX + brickSize, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 155, 89) },
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 155, 89) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 149, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 149, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 142, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 142, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(187, 33, 159) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 104, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 78, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 32, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 12), color: Color3.FromInts(255, 57, 85) },
  // Row 14
  { position: new Vector3(brickOffsetX + brickSize, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 155, 89) },
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 155, 89) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 149, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 149, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 142, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 142, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 136, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(187, 33, 159) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(187, 33, 159) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 104, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 104, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 202, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 87, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 78, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 57, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 32, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 13), color: Color3.FromInts(255, 57, 85) },
  // Row 15
  { position: new Vector3(brickOffsetX + brickSize, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 161, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 161, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 155, 89) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 155, 89) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 149, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 149, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 142, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 142, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(201, 35, 144) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(201, 35, 144) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(201, 35, 144) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 104, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 104, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 97, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 97, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 84, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 84, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 71, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 71, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 32, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 14), color: Color3.FromInts(255, 64, 85) },
  // Row 16
  { position: new Vector3(brickOffsetX + brickSize, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 161, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 161, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 155, 89) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 155, 89) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 149, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 149, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 142, 88) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(201, 35, 144) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(201, 35, 144) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(201, 35, 144) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(201, 35, 144) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 104, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 104, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 97, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 97, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 84, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 84, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 77, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 71, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 71, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 64, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 32, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 15), color: Color3.FromInts(255, 64, 85) },
  // Row 17
  { position: new Vector3(brickOffsetX + brickSize, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 168, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 168, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 161, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 161, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 155, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 155, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(216, 36, 128) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(216, 36, 128) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(216, 36, 128) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(216, 36, 128) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(216, 36, 128) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 118, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 112, 96) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 112, 96) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 78, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 78, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 32, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 16), color: Color3.FromInts(255, 70, 85) },
  // Row 18
  { position: new Vector3(brickOffsetX + brickSize, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 168, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 168, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 161, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 161, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 155, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(216, 36, 128) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(216, 36, 128) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(216, 36, 128) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(216, 36, 128) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(216, 36, 128) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(216, 36, 128) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 110, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 112, 96) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 78, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 78, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 70, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 32, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 17), color: Color3.FromInts(255, 70, 85) },
  // Row 19
  { position: new Vector3(brickOffsetX + brickSize, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 175, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 175, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 167, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 167, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 117, 87) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(189, 33, 156) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 105, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 78, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 32, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 18), color: Color3.FromInts(255, 78, 86) },
  // Row 20
  { position: new Vector3(brickOffsetX + brickSize, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(255, 175, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(255, 175, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(255, 167, 90) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(230, 37, 111) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(189, 33, 156) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(189, 33, 156) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(255, 84, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(255, 78, 85) },
  { position: new Vector3(brickOffsetX + brickSize * 32, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 19), color: Color3.FromInts(255, 78, 85) },
  // Row 21
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(255, 180, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(245, 40, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(245, 40, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(245, 40, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(245, 40, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(245, 40, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(245, 40, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(209, 36, 135) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(209, 36, 135) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(209, 36, 135) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(255, 105, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(255, 91, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 20), color: Color3.FromInts(255, 84, 85) },
  // Row 22
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(245, 40, 96) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(245, 40, 96) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(245, 40, 96) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(245, 40, 96) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(245, 40, 96) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(209, 36, 135) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(209, 36, 135) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(209, 36, 135) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(209, 36, 135) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(255, 98, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 21), color: Color3.FromInts(255, 98, 86) },
  // Row 23
  { position: new Vector3(brickOffsetX + brickSize * 2, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(254, 195, 108) },
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(230, 37, 113) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(230, 37, 113) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(230, 37, 113) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(230, 37, 113) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(230, 37, 113) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 104, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 97, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(255, 97, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 31, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 22), color: Color3.FromInts(247, 88, 83) },
  // Row 24
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(230, 37, 113) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(230, 37, 113) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(230, 37, 113) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(230, 37, 113) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(230, 37, 113) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(230, 37, 113) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 97, 86) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 23), color: Color3.FromInts(255, 97, 86) },
  // Row 25
  { position: new Vector3(brickOffsetX + brickSize * 3, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 30, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 24), color: Color3.FromInts(253, 103, 85) },
  // Row 26
  { position: new Vector3(brickOffsetX + brickSize * 4, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(255, 189, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.White() },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(249, 40, 91) },
  { position: new Vector3(brickOffsetX + brickSize * 29, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 25), color: Color3.FromInts(249, 40, 91) },
  // Row 27
  { position: new Vector3(brickOffsetX + brickSize * 5, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 28, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 26), color: Color3.FromInts(252, 154, 101) },
  // Row 28
  { position: new Vector3(brickOffsetX + brickSize * 6, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  { position: new Vector3(brickOffsetX + brickSize * 27, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 27), color: Color3.FromInts(252, 154, 101) },
  // Row 29
  { position: new Vector3(brickOffsetX + brickSize * 7, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 26, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 28), color: Color3.FromInts(255, 40, 84) },
  // Row 30
  { position: new Vector3(brickOffsetX + brickSize * 8, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 9, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 24, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 25, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 29), color: Color3.FromInts(255, 40, 84) },
  // Row 31
  { position: new Vector3(brickOffsetX + brickSize * 10, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 11, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 12, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 21, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 22, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 23, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 30), color: Color3.FromInts(255, 41, 84) },
  // Row 32
  { position: new Vector3(brickOffsetX + brickSize * 13, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 31), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 14, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 31), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 15, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 31), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 16, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 31), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 17, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 31), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 18, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 31), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 19, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 31), color: Color3.FromInts(255, 41, 84) },
  { position: new Vector3(brickOffsetX + brickSize * 20, GameManager.PLANE_HEIGHT, brickOffsetZ - brickSize * 31), color: Color3.FromInts(255, 41, 84) },
]

// Load level
export function loadDecentralandLevel(parent: Entity): void {
  readyPlayerOne.setParent(parent)

  // Wall
  const wallLeft = new Wall(
    new Transform({ position: new Vector3(3.5, GameManager.PLANE_HEIGHT + 0.1, 16), scale: new Vector3(2, 0.1, 32) }),
    new Vector3(1, 0, 0),
    Color3.White(),
    parent
  )
  const wallTop = new Wall(
    new Transform({ position: new Vector3(16, GameManager.PLANE_HEIGHT + 0.1, 31.5), scale: new Vector3(27, 0.1, 2) }),
    new Vector3(0, 0, -1),
    Color3.White(),
    parent
  )
  const wallRight = new Wall(
    new Transform({ position: new Vector3(28.5, GameManager.PLANE_HEIGHT + 0.1, 16), scale: new Vector3(2, 0.1, 32) }),
    new Vector3(-1, 0, 0),
    Color3.White(),
    parent
  )

  // Background
  const background = new Background(new Transform({ position: new Vector3(16, GameManager.PLANE_HEIGHT - 0.1, 16), scale: new Vector3(26, 0.01, 32) }), parent)
}

export function loadDecentralandBricks(parent: Entity): void {
  readyPlayerOne.getComponent(GLTFShape).visible = false
  for (let i = 0; i < bricks.length; i++) {
    const brick = new Brick(new Transform({ position: bricks[i].position, scale: new Vector3(brickSize - 0.1, 0.1, brickSize - 0.1) }), bricks[i].color, parent)
    gameElements.push(brick)
  }
}

export function unloadDecentralandBricks(): void {
  readyPlayerOne.getComponent(GLTFShape).visible = true
  while (gameElements.length) {
    let gameElement = gameElements.pop()
    engine.removeEntity(gameElement)
  }
}
